
import os
import asyncio
import logging
import random
from datetime import datetime, timedelta, time as dtime
from io import BytesIO
from zoneinfo import ZoneInfo

from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import (
    Application, ApplicationBuilder, CommandHandler, ContextTypes,
    ChatJoinRequestHandler
)
import httpx

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
    level=logging.INFO
)
log = logging.getLogger("med-reminder-render")

# ---------- –ö–û–ù–§–ò–ì ----------
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")      # "-1001234567890" –∏–ª–∏ "@your_channel"
ALMATY_TZ = ZoneInfo("Asia/Almaty")
REMINDER_TIME = dtime(hour=8, minute=0, tzinfo=ALMATY_TZ)  # 08:00 –ø–æ –ê–ª–º–∞—Ç—ã
CAT_PROB = float(os.getenv("CAT_PROB", "0.30"))

LOVE_PHRASES = [
    "üíñ –õ—é–±–∏–º–∞—è, –Ω–µ –∑–∞–±—É–¥—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ.",
    "üíä –ó–∞–±–æ—Ç–∞ –æ —Ç–µ–±–µ ‚Äî –≥–ª–∞–≤–Ω–æ–µ. –ü—Ä–∏–º–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ, —Å–æ–ª–Ω—ã—à–∫–æ.",
    "‚ú® –¢—ã —É –º–µ–Ω—è —Å–∞–º–∞—è –ª—É—á—à–∞—è. –í—Ä–µ–º—è –¥–ª—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞!",
    "ü•∞ –ù–µ–∂–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞—é: —Ç–∞–±–ª–µ—Ç–æ—á–∫–∞ ‚Äî –∏ –¥–µ–Ω—å —Å—Ç–∞–Ω–µ—Ç –ª—É—á—à–µ.",
    "üå∏ –ü—É—Å—Ç—å —ç—Ç–æ –º–∞–ª–µ–Ω—å–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç —Ç–≤–æ—ë –∑–¥–æ—Ä–æ–≤—å–µ.",
    "ü§ç –ë–µ—Ä–µ–≥–∏ —Å–µ–±—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞. –ü–æ—Ä–∞ –ø—Ä–∏–Ω—è—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ.",
    "üåû –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –ª—é–±–æ–≤—å! –õ–µ–∫–∞—Ä—Å—Ç–≤–æ –∂–¥—ë—Ç —Ç–µ–±—è."
]

REMINDER_TEXT_TPL = (
    "{heart}\n"
    "<b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>: –ø–æ—Ä–∞ –ø—Ä–∏–Ω—è—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ.\n\n"
    "{phrase}\n\n"
    "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω—É–∂–Ω–æ ‚Äî –Ω–∞–ø–∏—à–∏ –º–Ω–µ ‚ù§Ô∏è"
)

# ---------- –£–¢–ò–õ–ò–¢–´ ----------
async def _fetch_random_cat_bytes() -> BytesIO | None:
    url = "https://cataas.com/cat"
    try:
        async with httpx.AsyncClient(timeout=15.0) as client:
            r = await client.get(url)
            r.raise_for_status()
            return BytesIO(r.content)
    except Exception as e:
        log.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ç–∏–∫–∞: %s", e)
        return None

async def _post_reminder_via_bot(bot):
    chat_id = CHANNEL_ID
    phrase = random.choice(LOVE_PHRASES)
    heart = random.choice(["‚ù§Ô∏è", "üíñ", "üíó", "üíï", "üíû", "ü©∑"])
    text = REMINDER_TEXT_TPL.format(heart=heart, phrase=phrase)

    if random.random() < CAT_PROB:
        cat = await _fetch_random_cat_bytes()
        if cat is not None:
            try:
                await bot.send_photo(chat_id=chat_id, photo=cat, caption=text, parse_mode=ParseMode.HTML)
                return
            except Exception as e:
                log.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∫–æ—Ç–∏–∫–∞: %s", e)

    await bot.send_message(chat_id=chat_id, text=text, parse_mode=ParseMode.HTML)

def _seconds_until_next_run(tz: ZoneInfo, hhmm: dtime) -> float:
    now = datetime.now(tz)
    target = now.replace(hour=hhmm.hour, minute=hhmm.minute, second=0, microsecond=0)
    if now >= target:
        target = target + timedelta(days=1)
    return (target - now).total_seconds()

async def daily_scheduler(application: Application):
    # –ø—Ä–æ—Å—Ç–æ–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –±–µ–∑ JobQueue
    while True:
        delay = _seconds_until_next_run(ALMATY_TZ, REMINDER_TIME)
        log.info("–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞: %.0f —Å–µ–∫.", delay)
        try:
            await asyncio.sleep(delay)
            await _post_reminder_via_bot(application.bot)
            # –Ω–µ–±–æ–ª—å—à–æ–π –±—É—Ñ–µ—Ä, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ø–∞—Å—Ç—å –≤ —Ç—É –∂–µ –º–∏–Ω—É—Ç—É –ø—Ä–∏ –∑–∞–¥–µ—Ä–∂–∫–∞—Ö
            await asyncio.sleep(1)
        except asyncio.CancelledError:
            raise
        except Exception as e:
            log.exception("–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: %s", e)
            await asyncio.sleep(5)

# ---------- –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ----------
async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø—É–±–ª–∏–∫—É—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –∫–∞–Ω–∞–ª –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 08:00 (–ê–ª–º–∞—Ç—ã).\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /test ‚Äî —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª —Å–µ–π—á–∞—Å\n"
        "‚Ä¢ /invite ‚Äî —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –ø–æ –∑–∞—è–≤–∫–µ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ"
    )

async def test_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await _post_reminder_via_bot(context.bot)
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª.")

async def invite_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        link = await context.bot.create_chat_invite_link(
            chat_id=CHANNEL_ID,
            creates_join_request=True,
            name="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ª–µ–∫–∞—Ä—Å—Ç–≤–µ"
        )
        await update.message.reply_text(f"–°—Å—ã–ª–∫–∞ –ø–æ –∑–∞—è–≤–∫–µ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ:\n{link.invite_link}")
    except Exception as e:
        await update.message.reply_text(f"–ù–µ —Å–º–æ–≥ —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É. –ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ. –û—à–∏–±–∫–∞: {e}")

# –ê–≤—Ç–æ-–æ–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –≤ –∫–∞–Ω–∞–ª
async def approve_join(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        cj = update.chat_join_request
        await context.bot.approve_chat_join_request(chat_id=cj.chat.id, user_id=cj.from_user.id)
        log.info("–û–¥–æ–±—Ä–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s –≤ —á–∞—Ç %s", cj.from_user.id, cj.chat.id)
    except Exception as e:
        log.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–¥–æ–±—Ä–∏—Ç—å –∑–∞—è–≤–∫—É: %s", e)

# ---------- HTTP-–°–ï–†–í–ï–† –î–õ–Ø RENDER ----------
async def start_http_server():
    from aiohttp import web

    async def healthz(request):
        return web.Response(text="ok")

    async def home(request):
        return web.Response(text="med-reminder is running")

    app = web.Application()
    app.router.add_get("/", home)
    app.router.add_get("/healthz", healthz)

    port = int(os.getenv("PORT") or 10000)  # Render –≤—ã–¥–∞—ë—Ç PORT –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, host="0.0.0.0", port=port)
    await site.start()
    log.info("HTTP server started on 0.0.0.0:%s", port)

    # –¥–µ—Ä–∂–∏–º —Å–µ—Ä–≤–µ—Ä –∂–∏–≤—ã–º
    await asyncio.Event().wait()

# ---------- MAIN ----------
async def main():
    if not BOT_TOKEN or not CHANNEL_ID:
        raise RuntimeError("–ù—É–∂–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –∏ CHANNEL_ID")

    application: Application = (
        ApplicationBuilder()
        .token(BOT_TOKEN)
        .build()
    )

    application.add_handler(CommandHandler("start", start_cmd))
    application.add_handler(CommandHandler("test", test_cmd))
    application.add_handler(CommandHandler("invite", invite_cmd))
    application.add_handler(ChatJoinRequestHandler(approve_join))

    # --- —Å—Ç–∞—Ä—Ç Telegram (polling) ---
    await application.initialize()
    # –ï—Å–ª–∏ –∫–æ–≥–¥–∞-—Ç–æ –≤–∫–ª—é—á–∞–ª–∏ –≤–µ–±—Ö—É–∫ ‚Äî —Å–Ω–∏–º–µ–º
    await application.bot.delete_webhook(drop_pending_updates=True)
    # –ó–∞–ø—É—Å–∫–∞–µ–º polling –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    if application.updater is None:
        # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π: –µ—Å–ª–∏ Updater –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º run_polling –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ç–∞—Å–∫–µ
        async def _run_polling_blocking():
            await application.start()
            await application.run_polling()
        polling_task = asyncio.create_task(_run_polling_blocking())
    else:
        await application.updater.start_polling()
        await application.start()
        polling_task = None
    log.info("Telegram bot polling started")

    # --- –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ø–æ–¥–Ω–∏–º–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ---
    http_task = asyncio.create_task(start_http_server())
    sched_task = asyncio.create_task(daily_scheduler(application))

    try:
        await asyncio.gather(http_task, sched_task, *( [polling_task] if polling_task else [] ))
    finally:
        if polling_task:
            polling_task.cancel()
        await application.stop()
        await application.shutdown()

if __name__ == "__main__":
    asyncio.run(main())
